type Authentication = variant { Ic; Evm : EvmParams; Svm : EvmParams };
type AuthenticationWith = variant {
  Ic;
  Evm : EvmAuthenticationWithParams;
  Svm : SvmAuthenticationWithParams;
};
type AuthenticationWithAddress = variant {
  Ic : IcParams;
  Evm : EvmParams;
  Svm : EvmParams;
};
type EvmAuthenticationWithParams = record { signature : text; message : text };
type EvmParams = record { address : text };
type HttpRequest = record {
  url : text;
  method : text;
  body : vec nat8;
  headers : vec record { text; text };
};
type HttpResponse = record {
  body : vec nat8;
  headers : vec record { text; text };
  streaming_strategy : opt StreamingStrategy;
  status_code : nat16;
};
type IcParams = record { "principal" : principal };
type PostStatus = variant { 
  Visible;
  Hidden;
};
type PostResponse = record {
  post_id: nat64;
  authentication : AuthenticationWithAddress;
  title : text;
  likes: vec record { nat64; AuthenticationWithAddress; };
  description : text;
  timestamp : nat64;
  replies : vec ReplyResponse;
  status: PostStatus;
};
type PostSummary = record {
  authentication : AuthenticationWithAddress;
  title : text;
  post_id : nat64;
  description : text;
  last_activity : nat64;
  replies_count : nat64;
  timestamp : nat64;
  status: PostStatus;
};
type Post = record {
  title : text;
  description : text;
  timestamp : nat64;
  status: PostStatus;
};
type Profile = record {
  authentication : Authentication;
  name : text;
  description : text;
  active_principal : principal;
};
type ProfileResponse = record {
  authentication : Authentication;
  name : text;
  description : text;
  active_principal : principal;
  roles : vec UserRole
};
type ReplyStatus = variant {
  Visible;
  Hidden;
};
type ReplyResponse = record {
  authentication : AuthenticationWithAddress;
  "text" : text;
  likes: vec record { nat64; AuthenticationWithAddress; };
  timestamp : nat64;
  status : ReplyStatus;
  reply_id: nat64;
};
type CreatePostResult = variant { Ok : PostSummary; Err : text };
type CreateProfileResult = variant { Ok : Profile; Err : text };
type CreateReplyResult = variant { Ok : ReplyResponse; Err : text };
type GetNextUpgradesResult = variant { Ok : vec UpgradeWithTrack; Err : text };
type GetPostResult = variant { Ok : PostResponse; Err : text };
type GetPostsByAuthResult = variant { Ok : vec PostSummary; Err : text };
type GetProfileResult = variant { Ok : ProfileResponse; Err : text };
type UpgradeCanisterResult = variant { Ok : null; Err : text };
type GetMetadataResult = variant { Ok : Metadata; Err : text };
type UpdatePostStatusResult = variant { Ok : null; Err : text };
type UpdateReplyStatusResult = variant { Ok : null; Err : text };
type GetHiddenPostsResult = variant { Ok : vec PostResponse; Err : text };
type GetHiddenReplyResult = variant { Ok : vec record { nat64; ReplyResponse; }; Err : text };
type GetMostPostsResult = variant { Ok : vec PostResponse; Err : text };
type GetMostReplyResult = variant { Ok : vec ReplyResponse; Err : text };
type LikePostResult = variant { Ok : nat64; Err : text };
type UnlikePostResult = variant { Ok : null; Err : text };
type LikeReplyResult = variant { Ok : nat64; Err : text };
type UnlikeReplyResult = variant { Ok : null; Err : text };

type Role = record { role : UserRole; timestamp : nat64 };

type StreamingCallbackToken = record {
  key : text;
  sha256 : opt vec nat8;
  index : nat;
  content_encoding : text;
};
type StreamingStrategy = variant {
  Callback : record {
    token : StreamingCallbackToken;
    callback : func () -> ();
  };
};

type SvmAuthenticationWithParams = record {
  signature : text;
  public_key : text;
  message : text;
};
type Metadata = record {
  version : text;
  track : text;
};
type UpgradeFrom = record {
  version : text;
  track : text;
};
type Track = record {
  name: text;
  timestamp: nat64;
};
type UpgradeWithTrack = record {
  track : Track;
  assets : vec text;
  version : text;
  timestamp : nat64;
  upgrade_from : opt UpgradeFrom;
  description: text;
};

type definite_canister_settings = record {
  freezing_threshold : nat;
  controllers : vec principal;
  memory_allocation : nat;
  compute_allocation : nat;
};

type CanisterStatusResponse = record {
  status : variant { stopped; stopping; running };
  memory_size : nat;
  cycles : nat;
  settings : definite_canister_settings;
  module_hash : opt vec nat8;
};
type UserRole = variant { Admin };


// Icrc7 and Icrc3
type Account = record { owner : principal; subaccount : opt vec nat8 };
type BurnArg = record {
  token_id : nat;
  memo : opt vec nat8;
  from_subaccount : opt vec nat8;
};
type BurnError = variant {
  GenericError : record { message : text; error_code : nat };
  NonExistingTokenId;
  Unauthorized;
  GenericBatchError : record { message : text; error_code : nat };
};
type MetadataValue = variant {
  Int : int;
  Nat : nat;
  Blob : vec nat8;
  Text : text;
};
type MintArg = record {
  to : Account;
  token_id : nat;
  memo : opt vec nat8;
  from_subaccount : opt vec nat8;
  token_description : opt text;
  token_logo : opt text;
  token_name : opt text;
};
type MintError = variant {
  GenericError : record { message : text; error_code : nat };
  SupplyCapReached;
  Unauthorized;
  GenericBatchError : record { message : text; error_code : nat };
  TokenIdAlreadyExist;
};
type Result = variant { Ok : nat; Err : BurnError };
type Result_1 = variant { Ok : nat; Err : TransferError };
type Result_2 = variant { Ok : nat; Err : MintError };
type Result_3 = variant { Ok : null; Err : text };
type Standard = record { url : text; name : text };
type TransferArg = record {
  to : Account;
  token_id : nat;
  memo : opt vec nat8;
  from_subaccount : opt vec nat8;
  created_at_time : opt nat64;
};
type TransferError = variant {
  GenericError : record { message : text; error_code : nat };
  Duplicate : record { duplicate_of : nat };
  NonExistingTokenId;
  Unauthorized;
  CreatedInFuture : record { ledger_time : nat64 };
  InvalidRecipient;
  GenericBatchError : record { message : text; error_code : nat };
  TooOld;
};

service : (opt principal, opt text, opt text ) -> {
  create_post : (text, text) -> (CreatePostResult);
  create_profile : (AuthenticationWith) -> (CreateProfileResult);
  create_reply : (nat64, text) -> (CreateReplyResult);
  update_post_status : (nat64, PostStatus) -> (UpdatePostStatusResult);
  update_reply_status : (nat64, ReplyStatus) -> (UpdateReplyStatusResult);
  like_post : (nat64) -> (LikePostResult);
  unlike_post : (nat64) -> (UnlikePostResult);
  like_reply : (nat64) -> (LikeReplyResult);
  unlike_reply : (nat64) -> (UnlikeReplyResult);
  upgrade_canister : (text, text) -> (UpgradeCanisterResult);
  get_next_upgrades : () -> (GetNextUpgradesResult);
  canister_status : () -> (CanisterStatusResponse);
  get_post : (nat64) -> (GetPostResult) query;
  get_posts : () -> (vec PostSummary) query;
  get_most_liked_posts : (AuthenticationWithAddress) -> (GetMostPostsResult) query;
  get_most_liked_replies : (AuthenticationWithAddress) -> (GetMostReplyResult) query;
  get_hidden_posts : () -> (GetHiddenPostsResult) query;
  get_hidden_replies : () -> (GetHiddenReplyResult) query;
  get_most_recent_posts : (AuthenticationWithAddress) -> (GetPostsByAuthResult) query;
  get_profile : () -> (GetProfileResult) query;
  get_profile_by_auth : (AuthenticationWithAddress) -> (opt ProfileResponse) query;
  get_metadata: () -> (GetMetadataResult) query;
  http_request : (HttpRequest) -> (HttpResponse) query;

  burn : (vec BurnArg) -> (vec opt Result);
  icrc7_atomic_batch_transfers : () -> (opt bool) query;
  icrc7_balance_of : (vec Account) -> (vec nat) query;
  icrc7_default_take_value : () -> (opt nat) query;
  icrc7_description : () -> (opt text) query;
  icrc7_logo : () -> (opt text) query;
  icrc7_max_memo_size : () -> (opt nat) query;
  icrc7_max_query_batch_size : () -> (opt nat) query;
  icrc7_max_take_value : () -> (opt nat) query;
  icrc7_max_update_batch_size : () -> (opt nat) query;
  icrc7_name : () -> (text) query;
  icrc7_owner_of : (vec nat) -> (vec opt Account) query;
  icrc7_supply_cap : () -> (opt nat) query;
  icrc7_supported_standards : () -> (vec Standard) query;
  icrc7_symbol : () -> (text) query;
  icrc7_token_metadata : (vec nat) -> (
      vec opt vec record { text; MetadataValue },
    ) query;
  icrc7_tokens : (opt nat, opt nat) -> (vec nat) query;
  icrc7_tokens_of : (Account, opt nat, opt nat) -> (vec nat) query;
  icrc7_total_supply : () -> (nat) query;
  icrc7_transfer : (vec TransferArg) -> (vec opt Result_1);
  mint : (MintArg) -> (Result_2);
  reset_tokens : () -> (Result_3);
}