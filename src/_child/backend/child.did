type Authentication = variant { Ic; Evm : EvmParams; Svm : EvmParams };
type AuthenticationWith = variant {
  Ic;
  Evm : EvmAuthenticationWithParams;
  Svm : SvmAuthenticationWithParams;
};
type AuthenticationWithAddress = variant {
  Ic : IcParams;
  Evm : EvmParams;
  Svm : EvmParams;
};
type EvmAuthenticationWithParams = record { signature : text; message : text };
type EvmParams = record { address : text };
type HttpRequest = record {
  url : text;
  method : text;
  body : vec nat8;
  headers : vec record { text; text };
};
type HttpResponse = record {
  body : vec nat8;
  headers : vec record { text; text };
  streaming_strategy : opt StreamingStrategy;
  status_code : nat16;
};
type IcParams = record { "principal" : principal };
type PostResponse = record {
  authentication : AuthenticationWithAddress;
  title : text;
  description : text;
  timestamp : nat64;
  replies : vec ReplyResponse;
};
type PostSummary = record {
  authentication : AuthenticationWithAddress;
  title : text;
  post_id : nat64;
  description : text;
  last_activity : nat64;
  replies_count : nat64;
  timestamp : nat64;
};
type Profile = record {
  authentication : Authentication;
  name : text;
  description : text;
  active_principal : principal;
};
type ReplyResponse = record {
  authentication : AuthenticationWithAddress;
  "text" : text;
  timestamp : nat64;
};
type CratePostResult = variant { Ok : PostSummary; Err : text };
type CreateProfileResult = variant { Ok : Profile; Err : text };
type CreateReplyResult = variant { Ok : ReplyResponse; Err : text };
type GetNextUpgradesResult = variant { Ok : vec UpgradeWithTrack; Err : text };
type GetPostResult = variant { Ok : PostResponse; Err : text };
type GetPostsByUserResult = variant { Ok : vec PostSummary; Err : text };
type GetProfileResult = variant { Ok : Profile; Err : text };
type UpgradeCanisterResult = variant { Ok : null; Err : text };
type GetMetadataResult = variant { Ok : Metadata; Err : text };

type Role = record { role : UserRole; timestamp : nat64 };
type StreamingCallbackToken = record {
  key : text;
  sha256 : opt vec nat8;
  index : nat;
  content_encoding : text;
};
type StreamingStrategy = variant {
  Callback : record {
    token : StreamingCallbackToken;
    callback : func () -> ();
  };
};
type SvmAuthenticationWithParams = record {
  signature : text;
  public_key : text;
  message : text;
};
type Metadata = record {
  version : text;
  track : text;
};
type UpgradeFrom = record {
  version : text;
  track : text;
};
type UpgradeWithTrack = record {
  track : text;
  assets : vec text;
  version : text;
  timestamp : nat64;
  upgrade_from : opt UpgradeFrom;
  description: text;
};
type UserRole = variant { Admin };
service : (opt principal, opt text, opt text ) -> {
  create_post : (text, text) -> (CratePostResult);
  create_profile : (AuthenticationWith) -> (CreateProfileResult);
  create_reply : (nat64, text) -> (CreateReplyResult);
  upgrade_canister : (text, text) -> (UpgradeCanisterResult);
  get_next_upgrades : () -> (GetNextUpgradesResult) query;
  get_post : (nat64) -> (GetPostResult) query;
  get_posts : () -> (vec PostSummary) query;
  get_posts_by_user : (Authentication) -> (GetPostsByUserResult) query;
  get_profile : () -> (GetProfileResult) query;
  get_profile_by_user : (Authentication) -> (opt Profile) query;
  get_user_roles : () -> (vec Role) query;
  get_metadata: () -> (GetMetadataResult) query;
  http_request : (HttpRequest) -> (HttpResponse) query;
}