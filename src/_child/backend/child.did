type Authentication = variant { Ic; Evm : EvmParams; Svm : EvmParams };
type AuthenticationWith = variant {
  Ic;
  Evm : EvmAuthenticationWithParams;
  Svm : SvmAuthenticationWithParams;
};
type AuthenticationWithAddress = variant {
  Ic : IcParams;
  Evm : EvmParams;
  Svm : EvmParams;
};
type EvmAuthenticationWithParams = record { signature : text; message : text };
type EvmParams = record { address : text };
type HttpRequest = record {
  url : text;
  method : text;
  body : vec nat8;
  headers : vec record { text; text };
};
type HttpResponse = record {
  body : vec nat8;
  headers : vec record { text; text };
  streaming_strategy : opt StreamingStrategy;
  status_code : nat16;
};
type IcParams = record { "principal" : principal };
type PostResponse = record {
  authentication : AuthenticationWithAddress;
  title : text;
  description : text;
  timestamp : nat64;
  replies : vec ReplyResponse;
};
type PostSummary = record {
  authentication : AuthenticationWithAddress;
  title : text;
  post_id : nat64;
  description : text;
  last_activity : nat64;
  replies_count : nat64;
  timestamp : nat64;
};
type Profile = record {
  authentication : Authentication;
  name : text;
  description : text;
  active_principal : principal;
};
type ReplyResponse = record {
  authentication : AuthenticationWithAddress;
  "text" : text;
  timestamp : nat64;
};
type Role = record { role : UserRole; timestamp : nat64 };
type StreamingCallbackToken = record {
  key : text;
  sha256 : opt vec nat8;
  index : nat;
  content_encoding : text;
};
type StreamingStrategy = variant {
  Callback : record {
    token : StreamingCallbackToken;
    callback : func () -> ();
  };
};
type SvmAuthenticationWithParams = record {
  signature : text;
  public_key : text;
  message : text;
};
type Upgrade = record {
  assets : vec text;
  version : text;
  timestamp : nat64;
  wasm_hash : vec nat8;
  upgrade_from : opt vec nat8;
};
type UserRole = variant { Admin };

service : (opt principal, opt vec nat8) -> {
  create_post : (title: text, description: text) -> (variant { Ok : PostSummary; Err : text });
  create_profile : (auth: AuthenticationWith) -> (variant { Ok : Profile; Err : text });
  create_reply : (post_id: nat64, context: text) -> (variant { Ok : ReplyResponse; Err : text });
  get_next_upgrades : () -> (variant { Ok : vec Upgrade; Err : text }) query;
  get_post : (post_id: nat64) -> (variant { Ok : PostResponse; Err : text }) query;
  get_posts : () -> (vec PostSummary) query;
  get_posts_by_user : (authentication: Authentication) -> (variant { Ok : vec PostSummary; Err : text }) query;
  get_profile : () -> (variant { Ok : Profile; Err : text }) query;
  get_profile_by_user : (Authentication) -> (opt Profile) query;
  get_user_roles : () -> (vec Role) query;
  http_request : (HttpRequest) -> (HttpResponse) query;
  upgrade_canister : (wasm: vec nat8) -> ( variant { Ok; Err : text });
}