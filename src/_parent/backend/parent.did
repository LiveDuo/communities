type CanisterData = record {
  id : opt principal;
  state : CanisterState;
  timestamp : nat64;
};
type CanisterState = variant {
  Creating;
  Uploading;
  Installing;
  Ready;
  Preparing;
  Authorizing;
};
type HttpRequest = record {
  url : text;
  method : text;
  body : vec nat8;
  headers : vec record { text; text };
};
type HttpResponse = record {
  body : vec nat8;
  headers : vec record { text; text };
  streaming_strategy : opt StreamingStrategy;
  status_code : nat16;
};

type CreateChildResult = variant { Ok : principal; Err : text };
type CreateTrackResult = variant { Ok; Err : text };
type CreateUpgreadeResult = variant { Ok; Err : text };
type RemoveTrackResult = variant { Ok; Err : text };
type RemoveUpgreadeResult = variant { Ok; Err : text };

type StreamingCallbackToken = record {
  key : text;
  sha256 : opt vec nat8;
  index : nat;
  content_encoding : text;
};
type StreamingStrategy = variant {
  Callback : record {
    token : StreamingCallbackToken;
    callback : func () -> ();
  };
};
type Upgrade = record {
  assets : vec text;
  version : text;
  timestamp : nat64;
  wasm_hash : vec nat8;
  upgrade_from : opt vec nat8;
};
type UpgradeWithTrack = record {
  track : text;
  assets : vec text;
  version : text;
  timestamp : nat64;
  wasm_hash : vec nat8;
  upgrade_from : opt vec nat8;
};
service : () -> {
  create_child : () -> (CreateChildResult);
  create_track : (text) -> (CreateTrackResult);
  create_upgrade : (text, opt vec nat8, vec text, text) -> (CreateUpgreadeResult);
  get_next_upgrades : (vec nat8) -> (vec Upgrade) query;
  get_upgrade : (vec nat8, text) -> (opt Upgrade) query;
  get_upgrades : () -> (vec UpgradeWithTrack) query;
  get_user_canisters : () -> (vec CanisterData) query;
  http_request : (HttpRequest) -> (HttpResponse) query;
  remove_track : (text) -> (RemoveTrackResult);
  remove_upgrade : (text, text) -> (RemoveUpgreadeResult);
}