type CallbackData = record {
  user : principal;
  state : CanisterState;
  canister_data_id : opt nat64;
};
type CanisterData = record {
  id : opt principal;
  state : CanisterState;
  timestamp : nat64;
};
type CanisterState = variant {
  Creating;
  Uploading;
  Installing;
  Ready;
  Preparing;
};
type HttpRequest = record {
  url : text;
  method : text;
  body : vec nat8;
  headers : vec record { text; text };
};
type HttpResponse = record {
  body : vec nat8;
  headers : vec record { text; text };
  streaming_strategy : opt StreamingStrategy;
  status_code : nat16;
};
type Result = variant { Ok : principal; Err : text };
type Result_1 = variant { Ok; Err : text };
type StreamingCallbackToken = record {
  key : text;
  sha256 : opt vec nat8;
  index : nat;
  content_encoding : text;
};
type StreamingStrategy = variant {
  Callback : record {
    token : StreamingCallbackToken;
    callback : func () -> ();
  };
};
type Upgrade = record {
  assets : vec text;
  version : text;
  timestamp : nat64;
  wasm_hash : vec nat8;
  upgrade_from : opt vec nat8;
};
service : {
  create_child : () -> (variant { Ok : principal; Err : text });
  create_upgrade : (version: text, upgrade_from: opt vec nat8, assets: vec text) -> (variant { Ok; Err : text });
  remove_upgrade : (version: text) -> (variant { Ok; Err : text });
  update_state_callback : (CallbackData) -> (opt nat64);
  get_childs : () -> (vec principal) query;
  get_next_upgrade : (wasm_hash: vec nat8) -> (opt Upgrade) query;
  get_upgrade : (wasm_hash: vec nat8) -> (opt Upgrade) query;
  get_upgrades : () -> (vec Upgrade) query;
  get_user_canisters : () -> (vec CanisterData) query;
  http_request : (HttpRequest) -> (HttpResponse) query;
}
